서버serverFacade가 validateRequest검증도 하고 ServerFacade안에 들어와있는 DAO가 data를 받아오고(.get) 바꾸는것을(.converData) ServerFacade는 다 직접 알고있다.
즉, validate, get, convert 모든것이 serverFacade랑 결합되어있다. 이 부분들이 바뀌면 serverFacade는 바로 영향을 받게 되는 구조이다.

이 예를 dao에 getdata하는부분 빼고는 다 날라갔다. 그리고DAO는 입력입자로 받는다. 즉 입력인지 dao를 바꿔서 집어넣어도 ServerFacade는 영향을 안받는다.
이렇게 함으로써 검증로직, 데이터 받는로직, 바꾸는 로직들과 serverFacade가 하는 일 (request를 받아서 request를 보내준다)이 비즈니스 로직으로 분리된다.

다시 말해 자기가 직접 dao를 호출한게 아니라 dao를 입력받음. 이것이 제어의 역전
"라이브러리를 사용할때는 내 코드가 라이브러리 코드를 호출하지만 프레임워크를 사용할때는 프레임워크가 내 코드를 호출합니다(@Autowired)

aop
 = 관점 지향 프로그래밍
공통 기능을 개발자의 코드 밖에서 필요한 시점에 적용 가능
우리가 어떤 로직을 구현하더라도 꼭 들어가야하는 로그나 인증이나 권한 부분은 꼭 필요하지만 집중하고 싶은 부분은 아니고 자연스럽게 됐으면 하는 부분인데
이런 부분을 자연스럽게 분리할수있도록 스프링은 aop라는것을 통해서 지원해준다.
